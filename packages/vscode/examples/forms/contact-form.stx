<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Contact Form Example</title>
  <link rel="stylesheet" href="/css/main.css">
</head>
<body>
  <div class="container">
    <h1>Contact Us</h1>

    {{-- Show success message if form was submitted --}}
    @if(formSubmitted)
      <div class="alert alert-success">
        Thank you for your message! We'll get back to you soon.
      </div>
    @endif

    {{-- TypeScript for form validation and handling --}}
    @ts
      interface FormData {
        name: string;
        email: string;
        subject: string;
        message: string;
      }

      interface FormErrors {
        name?: string;
        email?: string;
        subject?: string;
        message?: string;
      }

      // Initialize form data
      const formData: FormData = {
        name: '',
        email: '',
        subject: '',
        message: ''
      };

      // Initialize form errors
      const errors: FormErrors = {};

      // Form validation function
      const validateForm = (): boolean => {
        const newErrors: FormErrors = {};
        let isValid = true;

        if (!formData.name.trim()) {
          newErrors.name = 'Name is required';
          isValid = false;
        }

        if (!formData.email.trim()) {
          newErrors.email = 'Email is required';
          isValid = false;
        } else if (!/^\S+@\S+\.\S+$/.test(formData.email)) {
          newErrors.email = 'Email is invalid';
          isValid = false;
        }

        if (!formData.subject.trim()) {
          newErrors.subject = 'Subject is required';
          isValid = false;
        }

        if (!formData.message.trim()) {
          newErrors.message = 'Message is required';
          isValid = false;
        } else if (formData.message.trim().length < 10) {
          newErrors.message = 'Message must be at least 10 characters';
          isValid = false;
        }

        // Update errors object
        Object.assign(errors, newErrors);

        return isValid;
      };

      // Form submission handler
      const handleSubmit = (event: Event) => {
        event.preventDefault();

        if (validateForm()) {
          // In a real app, this would send data to the server
          console.log('Form data:', formData);

          // Reset form after successful submission
          formData.name = '';
          formData.email = '';
          formData.subject = '';
          formData.message = '';

          // Show success message
          formSubmitted = true;
        }
      };
    @endts

    {{-- Contact Form with Validation --}}
    <form @submit="handleSubmit" class="contact-form">
      <div class="form-group">
        <label for="name">Name</label>
        <input
          type="text"
          id="name"
          class="form-control {{ errors.name ? 'is-invalid' : '' }}"
          v-model="formData.name"
          placeholder="Your name"
        >
        @if(errors.name)
          <div class="invalid-feedback">{{ errors.name }}</div>
        @endif
      </div>

      <div class="form-group">
        <label for="email">Email</label>
        <input
          type="email"
          id="email"
          class="form-control {{ errors.email ? 'is-invalid' : '' }}"
          v-model="formData.email"
          placeholder="your.email@example.com"
        >
        @if(errors.email)
          <div class="invalid-feedback">{{ errors.email }}</div>
        @endif
      </div>

      <div class="form-group">
        <label for="subject">Subject</label>
        <input
          type="text"
          id="subject"
          class="form-control {{ errors.subject ? 'is-invalid' : '' }}"
          v-model="formData.subject"
          placeholder="Subject of your message"
        >
        @if(errors.subject)
          <div class="invalid-feedback">{{ errors.subject }}</div>
        @endif
      </div>

      <div class="form-group">
        <label for="message">Message</label>
        <textarea
          id="message"
          class="form-control {{ errors.message ? 'is-invalid' : '' }}"
          v-model="formData.message"
          rows="5"
          placeholder="Your message here..."
        ></textarea>
        @if(errors.message)
          <div class="invalid-feedback">{{ errors.message }}</div>
        @endif
      </div>

      <button type="submit" class="btn btn-primary">Send Message</button>
    </form>

    {{-- Add JavaScript for form handling --}}
    <script>
      @js
        // Form initialization and reactivity setup would go here
        document.addEventListener('DOMContentLoaded', () => {
          console.log('Form initialized');

          // In a real app, this would hook up event listeners and form handling
        });
      @endjs
    </script>
  </div>

  {{-- Include footer component --}}
  @include('partials/footer', {
    year: new Date().getFullYear(),
    company: 'Stacks JS'
  })
</body>
</html>